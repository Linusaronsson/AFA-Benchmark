configfile: "workflow/conf/default.yaml"


# Define global variables from config values
EXPERIMENT_ID = config["experiment_id"]
DATASET_SPLITS = config["dataset_splits"]
DATASET_ARTIFACT_ALIASES = config["dataset_artifact_aliases"]
DATASET_SPLIT_MODE = config["dataset_split_mode"]
CLASSIFIER = config["classifier"]
CLASSIFIER_ARTIFACT_ALIAS = config["classifier_artifact_alias"]
VALIDATE_ARTIFACTS = config["validate_artifacts"]
SEEDS = config["seeds"]
TRAIN_DEVICE = config["train_device"]
EVAL_DEVICE = config["eval_device"]
COST_PARAMS_PER_METHOD = config["cost_params_per_method"]
METHODS = list(COST_PARAMS_PER_METHOD.keys())
HAS_PRETRAIN_STAGE = config["has_pretrain_stage"]
PRETRAIN_ALIAS = config["pretrain_alias"]
SMOKE_TEST = config["smoke_test"]

DATASETS = list(DATASET_ARTIFACT_ALIASES.keys())

COST_PARAMS_INDICES_PER_METHOD = {
    method: list(range(len(params)))
    for method, params in COST_PARAMS_PER_METHOD.items()
}


# DONE
rule soft_budget:
    input:
        "results/soft_budget/plot.pdf",


# DONE
rule train_soft_budget_method:
    output:
        touch(
            "indicators/soft_budget/trained_method/{dataset}/split{dataset_split}/{method}/costparam{cost_param}/seed{seed}.done"
        ),
    params:
        dataset_or_pretrain_artifact_name_arg=lambda wildcards: (
            f"pretrained_model_artifact_name=pretrain_{wildcards.method}-{wildcards.dataset}_split_{wildcards.dataset_split}:{PRETRAIN_ALIAS}"
            if HAS_PRETRAIN_STAGE[wildcards.method]
            else f"dataset_artifact_name={wildcards.dataset}_split_{wildcards.dataset_split}:{DATASET_ARTIFACT_ALIASES[wildcards.dataset]}"
        ),
        dataset_specific_args=lambda wildcards: (
            f"dataset@_global_={wildcards.dataset}_smoke"
            if SMOKE_TEST
            else f"dataset@_global_={wildcards.dataset}"
        ),
    shell:
        """
            uv run scripts/train_methods/train_{wildcards.method}.py \
                {params.dataset_specific_args} \
                {params.dataset_or_pretrain_artifact_name_arg} \
                seed={wildcards.seed} \
                hard_budget=null \
                output_artifact_aliases=["{EXPERIMENT_ID}"] \
                cost_param={wildcards.cost_param} \
                device={TRAIN_DEVICE}
        """


# DONE
rule eval_soft_budget_method:
    input:
        "indicators/soft_budget/trained_method/{dataset}/split{dataset_split}/{method}/costparam{cost_param}/seed{seed}.done",
    output:
        touch(
            "indicators/soft_budget/eval/{method}/{dataset}/split{dataset_split}/costparam{cost_param}/seed{seed}.done"
        ),
    shell:
        """
        uv run scripts/evaluation/eval_soft_afa_method.py \
            trained_method_artifact_name=train_{wildcards.method}-{wildcards.dataset}_split_{wildcards.dataset_split}-costparam_{wildcards.cost_param}-seed_{wildcards.seed}:{EXPERIMENT_ID} \
            cost_param={wildcards.cost_param} \
            trained_classifier_artifact_name={CLASSIFIER}-{wildcards.dataset}_split_{wildcards.dataset_split}:{CLASSIFIER_ARTIFACT_ALIAS} \
            output_artifact_aliases=["{EXPERIMENT_ID}"] \
            seed=null \
            device={EVAL_DEVICE} \
            eval_only_n_samples=null \
            dataset_split={DATASET_SPLIT_MODE} \
            validate_artifacts={VALIDATE_ARTIFACTS}
        """


# DONE
rule download_soft_budget_eval_result:
    input:
        "indicators/soft_budget/eval/{method}/{dataset}/split{dataset_split}/costparam{cost_param}/seed{seed}.done",
    output:
        "results/soft_budget/eval/{method}/{dataset}/split{dataset_split}/costparam{cost_param}/seed{seed}/soft_eval_data.csv",
    shell:
        """
            uv run wandb artifact get train_{wildcards.method}-{wildcards.dataset}_split_{wildcards.dataset_split}-costparam_{wildcards.cost_param}-seed_{wildcards.seed}-{CLASSIFIER}-{wildcards.dataset}_split_{wildcards.dataset_split}:{EXPERIMENT_ID} --root results/soft_budget/eval/{wildcards.method}/{wildcards.dataset}/split{wildcards.dataset_split}/costparam{wildcards.cost_param}/seed{wildcards.seed}
        """


# DONE
rule combine_soft_budget_eval_results:
    input:
        [
            f"results/soft_budget/eval/{method}/{dataset}/split{dataset_split}/costparam{cost_param}/seed{seed}/soft_eval_data.csv"
            for method in METHODS
            for dataset in DATASETS
            for dataset_split in DATASET_SPLITS
            for cost_param in COST_PARAMS_PER_METHOD[method]
            for seed in SEEDS
        ],
    output:
        "results/soft_budget/eval/combined.csv",
    conda:
        "envs/R.yaml"
    shell:
        """
        Rscript scripts/misc/combine_soft_budget_results.R {input} {output}
        """


# DONE
rule soft_budget_plot:
    input:
        "results/soft_budget/eval/combined.csv",
    output:
        "results/soft_budget/plot.pdf",
    conda:
        "envs/R.yaml"
    shell:
        """
        Rscript scripts/plotting/produce_soft_budget_plots.R {input[0]} {output}
        """
