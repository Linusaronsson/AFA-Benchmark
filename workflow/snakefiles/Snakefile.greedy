configfile: "workflow/conf/greedy.yaml"

from collections.abc import Mapping

# Define global variables from config values
EXPERIMENT_ID = config["experiment_id"]
DATASET_ARTIFACT_ALIASES = config["dataset_artifact_aliases"]
EVAL_BATCH_SIZE_PER_DATASET = config["eval_batch_size_per_dataset"]
DATASET_SPLITS = config["dataset_splits"]
DATASET_SPLIT_MODE = config["dataset_split_mode"]
# PRETRAINED_MODEL_ALIASES = config["pretrained_model_aliases"]
TRAINED_METHOD_ALIASES = config["trained_method_artifact_aliases"]
CLASSIFIER = config["classifier"]
CLASSIFIER_ARTIFACT_ALIASES = config["classifier_artifact_aliases"]
VALIDATE_ARTIFACTS = config["validate_artifacts"]
SEEDS = config["seeds"]
# TRAIN_DEVICE = config["train_device"]
EVAL_DEVICE = config["eval_device"]
COST_PARAMS_PER_METHOD = config["cost_params_per_method"]
TRAINED_BUDGETS_PER_METHOD = config["trained_budgets_per_method"]
SMOKE_TEST = config["smoke_test"]

# METHODS_WITH_PRETRAIN_STAGE = set(PRETRAINED_MODEL_ALIASES.keys())
METHODS = list(COST_PARAMS_PER_METHOD.keys())
DATASETS = list(DATASET_ARTIFACT_ALIASES.keys())
COST_PARAMS_INDICES_PER_METHOD = {
    method: list(range(len(params)))
    for method, params in COST_PARAMS_PER_METHOD.items()
}

def get_budgets(method: str, dataset: str):
    entry = TRAINED_BUDGETS_PER_METHOD[method]
    if isinstance(entry, Mapping):  # dataset-specific budgets
        if dataset not in entry:
            raise KeyError(
                f"No budgets specified for method '{method}' and dataset '{dataset}'. "
                "Add it under trained_budgets_per_method in your config."
            )
        return entry[dataset]
    return entry

# Fast way to produce soft budget plot
rule soft_budget:
    input:
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/plot1.pdf",
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/plot2.pdf",
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/plot3.pdf",


rule soft_budget_eval_all:
    input:
        [
            f"experiments/{EXPERIMENT_ID}/indicators/soft_budget/eval/{method}/{dataset}/split{dataset_split}/budget{budget}/costparam{cost_param}/seed{seed}.done"
            for method in METHODS
            for dataset in DATASETS
            for dataset_split in DATASET_SPLITS
            for budget in get_budgets(method, dataset)
            for cost_param in COST_PARAMS_PER_METHOD[method]
            for seed in SEEDS
        ],


rule eval_soft_budget_method:
    input:
        [],
    output:
        touch(
            f"experiments/{EXPERIMENT_ID}/indicators/soft_budget/eval/{{method}}/{{dataset}}/split{{dataset_split}}/budget{{budget}}/costparam{{cost_param}}/seed{{seed}}.done"
        ),
    params:
        classifier_arg=lambda wildcards: f"trained_classifier_artifact_name={CLASSIFIER}-{wildcards.dataset}_split_{wildcards.dataset_split}:{CLASSIFIER_ARTIFACT_ALIASES[wildcards.dataset]}",
        batch_size=lambda wildcards: EVAL_BATCH_SIZE_PER_DATASET[wildcards.dataset],
        trained_alias=lambda wildcards: TRAINED_METHOD_ALIASES.get(wildcards.method, EXPERIMENT_ID),
    shell:
        """
        WANDB_HTTP_TIMEOUT=60 uv run scripts/evaluation/eval_soft_afa_method.py \
            trained_method_artifact_name=train_{wildcards.method}-{wildcards.dataset}_split_{wildcards.dataset_split}-budget_{wildcards.budget}-seed_{wildcards.seed}:{params.trained_alias} \
            cost_param={wildcards.cost_param} \
            {params.classifier_arg} \
            output_artifact_aliases=["{EXPERIMENT_ID}"] \
            seed=null \
            device={EVAL_DEVICE} \
            eval_only_n_samples=null \
            dataset_split={DATASET_SPLIT_MODE} \
            validate_artifacts={VALIDATE_ARTIFACTS} \
            batch_size={params.batch_size}
        """


rule download_soft_budget_eval_result:
    input:
        f"experiments/{EXPERIMENT_ID}/indicators/soft_budget/eval/{{method}}/{{dataset}}/split{{dataset_split}}/budget{{budget}}/costparam{{cost_param}}/seed{{seed}}.done",
    output:
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/eval/{{method}}/{{dataset}}/split{{dataset_split}}/budget{{budget}}/costparam{{cost_param}}/seed{{seed}}/soft_eval_data.csv",
    params:
        experiment_id=EXPERIMENT_ID,
    shell:
        """
            WANDB_HTTP_TIMEOUT=60 uv run wandb artifact get train_{wildcards.method}-{wildcards.dataset}_split_{wildcards.dataset_split}-costparam_{wildcards.cost_param}-seed_{wildcards.seed}-{CLASSIFIER}-{wildcards.dataset}_split_{wildcards.dataset_split}-soft:{EXPERIMENT_ID} --root experiments/{params.experiment_id}/results/soft_budget/eval/{wildcards.method}/{wildcards.dataset}/split{wildcards.dataset_split}/budget{wildcards.budget}/costparam{wildcards.cost_param}/seed{wildcards.seed}
        """


rule add_dataset_split_col_to_soft_budget_eval_result:
    input:
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/eval/{{method}}/{{dataset}}/split{{dataset_split}}/budget{{budget}}/costparam{{cost_param}}/seed{{seed}}/soft_eval_data.csv",
    output:
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/eval/{{method}}/{{dataset}}/split{{dataset_split}}/budget{{budget}}/costparam{{cost_param}}/seed{{seed}}/soft_eval_data_with_split.csv",
    conda:
        "../envs/R.yaml"
    shell:
        """
        Rscript scripts/misc/add_dataset_split_col.R {input} {output} {wildcards.dataset_split}
        """


rule combine_soft_budget_eval_results:
    input:
        [
            f"experiments/{EXPERIMENT_ID}/results/soft_budget/eval/{method}/{dataset}/split{dataset_split}/budget{budget}/costparam{cost_param}/seed{seed}/soft_eval_data_with_split.csv"
            for method in METHODS
            for dataset in DATASETS
            for dataset_split in DATASET_SPLITS
            for budget in get_budgets(method, dataset)
            for cost_param in COST_PARAMS_PER_METHOD[method]
            for seed in SEEDS
        ],
    output:
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/eval/combined.csv",
    conda:
        "../envs/R.yaml"
    shell:
        """
        Rscript scripts/misc/combine_soft_budget_results.R {input} {output}
        """


rule soft_budget_plot:
    input:
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/eval/combined.csv",
    output:
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/plot1.pdf",
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/plot2.pdf",
        f"experiments/{EXPERIMENT_ID}/results/soft_budget/plot3.pdf",
    conda:
        "../envs/R.yaml"
    shell:
        """
        Rscript scripts/plotting/produce_soft_budget_plots.R {input} {output}
        """
